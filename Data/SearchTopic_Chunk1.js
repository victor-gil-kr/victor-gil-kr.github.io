define({"74":{y:0,u:"../content/exportscriptpemplanogram.htm",l:-1,t:"ExportScriptPEMPlanogram",i:0.000919624090050648,a:"This command exports the Planogram Exchange Management (PEM) planogram (selected in Open Access) to a specified temporary file in a temporary location. The file then is added to the job table, so it can be downloaded. To use this command, you must create a separate CKS script containing the command, ..."},"75":{y:0,u:"../content/exporttabledata.htm",l:-1,t:"ExportTableData",i:0.000919624090050648,a:"This command enables you to export table data to an external file, which allows individuals without Space Planning to view the table data. You can export table data in the following formats: Rich Text Format (RTF) Fixed Column Widths (text file) Comma Separated (text file) Tab Delimited (text file) ..."},"76":{y:0,u:"../content/filterproductlibraryupdatefrom.htm",l:-1,t:"FilterProductLibraryUpdateFrom",i:0.000919624090050648,a:"This command enables you to filter a selected product library before using the  UpdateProjectFromProductLibrary  command to update the project with information from the library.  This command is an advanced feature and should be used only by experienced personnel. You must use this command before ..."},"77":{y:0,u:"../content/filterproductlibraryupdateinto.htm",l:-1,t:"FilterProductLibraryUpdateInto",i:0.000919624090050648,a:"This command enables you to filter a selected product library before using the  UpdateProductLibraryFromProject  command to update the library with data from the project. This command is an advanced feature and should be used only by experienced personnel. You must use this command before using the  ..."},"78":{y:0,u:"../content/findproduct.htm",l:-1,t:"FindProduct",i:0.00193303884821762,a:"This command enables you to determine if a specific product exists in the active project. If the product is found, the command returns a reference to the product, without selecting the product. If the product is not found, the commands returns a NULL value.  Note: If you want to locate and select a ..."},"79":{y:0,u:"../content/forallopenprojects.htm",l:-1,t:"ForAllOpenProjects",i:0.000919624090050648,a:"This command enables you to process all projects that are open in Space Planning (including file-based and database projects). You do not need to create a file list to use this command. The projects remain open after they are processed.  Note: You should not use the  CloseProjectFile  command within ..."},"80":{y:0,u:"../content/forceinventory.htm",l:-1,t:"ForceInventory",i:0.00612793968085944,a:"This command enables you to perform a Force Inventory on the active planogram. You must set the parameters for the Force Inventory using the  CreateForceInventoryParameters  command before you use this command. For more information on Force Inventory, see \"Force Inventory overview\" in the Space ..."},"81":{y:0,u:"../content/fordatabaseplanograms.htm",l:-1,t:"ForDatabasePlanograms",i:0.00114161591686091,a:"This loop enables you to process a defined group of planograms from the Category Knowledge Base database. You define the planograms in the group by listing their DBKey values, separated by commas, in the parentheses within the command line.  Planograms from the database are loaded automatically as ..."},"82":{y:0,u:"../content/fordatabaseprojects.htm",l:-1,t:"ForDatabaseProjects",i:0.00114161591686091,a:"This loop enables you to process a defined group of projects from the Category Knowledge Base database. You define the projects in the group by listing their DBKey values, separated by commas, in the parentheses within the command line.  Projects from the database are loaded automatically at the ..."},"83":{y:0,u:"../content/fordrawings.htm",l:-1,t:"ForDrawings",i:0.00233039122695782,a:"This loop performs actions for all drawings in the active planogram. You can use the WhereCondition parameter to identify specific drawings to be processed by the commands in the loop.  Syntax Visual Basic Copy For Each Var as Space.Drawing In SpacePlanning.ForDrawings(WhereCondition as String) Next ..."},"84":{y:0,u:"../content/forfixturepositions.htm",l:-1,t:"ForFixturePositions",i:0.00612793968085944,a:"This loop performs actions for all positions on the selected fixture. You must use a script command to select a fixture on the active planogram before using this command. You can use the  WhereCondition  parameter to identify specific positions to be processed by the commands in the loop.  Note: If ..."},"85":{y:0,u:"../content/forfixtures.htm",l:-1,t:"ForFixtures",i:0.0186809040355048,a:"This loop performs actions for all fixtures on the active planogram. You can use the  WhereCondition  parameter to identify specific fixtures to be processed by the commands in the loop.  Syntax Visual Basic Copy For Each Var as Space.Fixture In SpacePlanning.ForFixtures(WhereCondition as String) ..."},"86":{y:0,u:"../content/forperformances.htm",l:-1,t:"ForPerformances",i:0.00612793968085944,a:"This loop performs actions for all performance records associated with the active planogram. You can use the  WhereCondition  parameter to identify specific performance records to be processed by the commands in the loop.  Syntax Visual Basic Copy For Each Var as Space.Performance In ..."},"87":{y:0,u:"../content/forplanograms.htm",l:-1,t:"ForPlanograms",i:0.0250500218346798,a:"This loop performs actions for all planograms in the active project. You can use the  WhereCondition  parameter to identify specific planograms to be processed by the commands in the loop.  Syntax Visual Basic Copy For Each Var as Space.Planogram In SpacePlanning.ForPlanograms(WhereCondition as ..."},"88":{y:0,u:"../content/forplanogramsvalidation.htm",l:-1,t:"ForPlanogramsValidation",i:0.00128322782405971,a:"When creating a validation script, this command causes all planograms selected during the save or load process to be validated. If the command is not used, the script validates only the active planogram.  If you have multi-planogram projects and want to validate all planograms before they are saved ..."},"89":{y:0,u:"../content/forpositions.htm",l:-1,t:"ForPositions",i:0.0295519539788085,a:"This loop performs actions for all positions on the active planogram. You can use the  WhereCondition  parameter to identify specific positions to be processed by the commands in the loop.  Note: If you include commands that refer to the ProductKey in this loop and multiple positions of the selected ..."},"90":{y:0,u:"../content/forproducts.htm",l:-1,t:"ForProducts",i:0.0184854732142577,a:"This loop performs actions for all products in the active project. You can use the  WhereCondition  parameter to identify specific products to be processed by the commands in the loop.  Syntax Visual Basic Copy For Each Var as Space.Position In SpacePlanning.ForPositions(WhereCondition as String) ..."},"91":{y:0,u:"../content/forprojects.htm",l:-1,t:"ForProjects",i:0.00253619267115386,a:"This loop performs actions for the selected list of projects. You can specify a list of file names or you can identify a directory and file extension to process all files of the selected type in the selected directory and subdirectories. Syntax Visual Basic Copy For Each Var1 As Space.Project In ..."},"92":{y:0,u:"../content/forsegments.htm",l:-1,t:"ForSegments",i:0.0149700981636453,a:"This loop performs actions for all segments of the active planogram. You can use the  WhereCondition  parameter to identify specific segments to be processed by the commands in the loop.  Syntax Visual Basic Copy For Each Var as Space.Segment In SpacePlanning.ForSegments(WhereCondition as String) ..."},"93":{y:0,u:"../content/forselectedobjects.htm",l:-1,t:"ForSelectedObjects",i:0.00159942886356613,a:"This loop performs actions for selected objects that are the same type as the primary selected object, which is typically the last object that was selected. Objects that are not the same type as the primary selected object are ignored by the loop.  Syntax Visual Basic Copy For Each Var as Object In ..."},"94":{y:0,u:"../content/generateplanograminmemory.htm",l:-1,t:"GeneratePlanogramInMemory",i:0.000919624090050648,a:"This command enables you to generate the specified target planograms in Space Planning based on the selected template and auxiliary planograms. The command assumes that you have already configured the template, revision template, and auxiliary planograms in the Planogram Generator Designer within ..."},"95":{y:0,u:"../content/getdatabaseconnectiondetails.htm",l:-1,t:"GetDatabaseConnectionDetails",i:0.00128322782405971,a:"This command enables you to access the connection string to create your own database connection to execute SQL jobs. The command returns the object of type DatabaseInfo, which contains properties such as the LoginName, Password, ServerType, ConnectionString, DataSource, and Database. Note: This ..."},"96":{y:0,u:"../content/getiksjobkey.htm",l:-1,t:"GetIKSJobKey",i:0.000919624090050648,a:"This command returns the DBKey of the job that is currently running. It can be used in a query to retrieve additional job record attributes. It can be used in an error message to log the job that caused the error. Note: This command refers to the legacy Intactix Knowledge Server application name, ..."},"97":{y:0,u:"../content/getiksparameter.htm",l:-1,t:"GetIKSParameter",i:0.000919624090050648,a:"This command enables you to retrieve the runtime parameter values specified by the remote user. This function can be used only in Category Knowledge Server script files. The parameters can be supplied in a comma-separated list or as individual parameters. Note: This command refers to the legacy ..."},"98":{y:0,u:"../content/getscriptjobkey.htm",l:-1,t:"GetScriptJobKey",i:0.0017013473750391,a:"This command returns the DBKey of the job that is currently running. It can be used in a query to retrieve additional job record attributes. It can be used in an error message to log the job that caused the error. Note: This command is supported only when Space Automation Professional is  configured ..."},"99":{y:0,u:"../content/getscriptparameter.htm",l:-1,t:"GetScriptParameter",i:0.0017013473750391,a:"This command enables you to retrieve the runtime parameter values specified by the remote user. This function can be used only in Category Knowledge Server script files. The parameters can be supplied in a comma-separated list or as individual parameters. Note: This command is supported only when ..."},"100":{y:0,u:"../content/getunmatchedproductsfromdatabase_.htm",l:-1,t:"GetUnMatchedProductsFromDatabase ",i:0.000919624090050648,a:" This command reviews the active project to identify products in the project that do not exist in the current Category Knowledge Base database. The command then creates a two-dimensional array to store the ID and UPC values for all non-database products in the project. Note: You must log into the ..."},"101":{y:0,u:"../content/grouppositions.htm",l:-1,t:"GroupPositions",i:0.000919624090050648,a:"This command groups adjacent positions of the same product into one position for easier manipulation. You must select the appropriate positions on the planogram before using this action in the script. Grouping requires that the adjacent positions have the same position characteristics, such as ..."},"102":{y:0,u:"../content/hideapplication.htm",l:-1,t:"HideApplication",i:0.0017013473750391,a:"This command hides Space Planning while the script is running. Using this command may speed performance of scripts during processing. This command must be added before opening projects or libraries for the command to function properly. After the script is run, Space Planning returns to view. Notes:  ..."},"103":{y:0,u:"../content/highlightproject.htm",l:-1,t:"HighlightProject",i:0.000919624090050648,a:"This command enables you to use existing highlight files to highlight projects. This command is the same as selecting  Open  in the Highlighting group of the Analysis ribbon in Space Planning and loading a highlight file, and can be used to turn highlighting off. Syntax Visual Basic Copy ..."},"104":{y:0,u:"../content/ignoreassortmentrecommendations.htm",l:-1,t:"IgnoreAssortmentRecommendations",i:0.000919624090050648,a:"This command ignores the recommended changes in merchandising style, orientation, or number of horizontal facings for the selected position. Syntax Visual Basic Copy IgnoreAssortmentRecommendations() C# Copy IgnoreAssortmentRecommendations() Example: Ignore assortment recommendations Classic style ..."},"105":{y:0,u:"../content/importfromassortmentoptimization.htm",l:-1,t:"ImportFromAssortmentOptimization",i:0.000919624090050648,a:"This command imports product and assortment data from an Assortment Optimization file into the active Space Planning project.  Syntax Visual Basic Copy ImportFromAssortmentOptimization ( _     PSMAOFileName As String, _     AOPXFileName As String _ ) C# Copy ImportFromAssortmentOptimization(string ..."},"106":{y:0,u:"../content/importpemplanogram.htm",l:-1,t:"ImportPEMPlanogram",i:0.000919624090050648,a:"This command enables you to import planograms for an existing Planogram Exchange Management (PEM) source into a Category Knowledge Base database. See \"Planogram Exchange Management overview\" in the Category Knowledge Base OnLine Expert for more information. The command returns an integer collection ..."},"107":{y:0,u:"../content/importproducts.htm",l:-1,t:"ImportProducts",i:0.000919624090050648,a:"This command enables you to import product data from a text file according to settings stored in a previously created Import Product Settings (.psm) file. The command enables you to add new products and update existing products with data in a text file without needing to create a separate product ..."},"108":{y:0,u:"../content/importscriptpemplanogram.htm",l:-1,t:"ImportScriptPEMPlanogram",i:0.000919624090050648,a:"This command enables you to import a Planogram Exchange Management (PEM) planogram (using the specified PEM source and save option) into the Category Knowledge Base database from a Category Knowledge Server (CKS) script. The command returns an integer collection that contains the DBKey values of the ..."},"109":{y:0,u:"../content/increasehorizontalfacings.htm",l:-1,t:"IncreaseHorizontalFacings",i:0.000919624090050648,a:"This command enables you to increase the number of horizontal facings by a specified amount. Merchandising settings made in Space Planning may limit the script\u0027s ability to increase the number of facings. For example, if Number of Facings Wide for the fixture is set to Fill Available Space, the ..."},"110":{y:0,u:"../content/increaseverticalfacings.htm",l:-1,t:"IncreaseVerticalFacings",i:0.000919624090050648,a:"This command enables you to increase the number of vertical facings by a specified amount. Merchandising settings made in Space Planning may limit the script\u0027s ability to increase the number of facings. For example, if Number of Facings High for the fixture is set to Fill Available Space, the number ..."},"111":{y:0,u:"../content/insertposition.htm",l:-1,t:"InsertPosition",i:0.00131048573254488,a:"This command enables you to insert a new position onto the active planogram. A product record for the position being inserted must exist in the project or be added to the project before this command can be used. Syntax Visual Basic Copy InsertPosition ( _     ProductKey As String, _     Direction As ..."},"112":{y:0,u:"../content/joinfixtures.htm",l:-1,t:"JoinFixtures",i:0.000919624090050648,a:"This command enables you to combine multiple selected fixtures into one fixture. You can use this command to join selected adjacent horizontal fixtures to form wider fixtures, or to join selected adjacent fixtures in the Z (depth) direction to create deeper fixtures. To join two or more fixtures, ..."},"113":{y:0,u:"../content/mergeplanogram_.htm",l:-1,t:"MergePlanogram ",i:0.000919624090050648,a:" This command enables you to append all planograms in a specified project onto the right side of the active planogram. This command performs the same action as selecting File \u003e Open and selecting the Merge Planograms with Active Planogram option when opening files, and enables you to create long ..."},"114":{y:0,u:"../content/mirror.htm",l:-1,t:"Mirror",i:0.000919624090050648,a:"This command reverses the location of specified objects on the planogram. You can select objects on the planogram before using this command to limit the objects whose locations are reversed. See \"Mirror objects on a planogram\u0027 in the Space Planning OnLine Expert for additional information. Syntax ..."},"115":{y:0,u:"../content/movedown.htm",l:-1,t:"MoveDown",i:0.000919624090050648,a:"This command moves the selected object down one increment. You must select objects on the planogram before using this action in the script. Note: The following conditions apply to all Move actions: The ability to move positions may depend on merchandising controls set for the position or the fixture ..."},"116":{y:0,u:"../content/moveexistingposition.htm",l:-1,t:"MoveExistingPosition",i:0.000919624090050648,a:"This command enables you to move an existing position on the active planogram to a new location.  Syntax Visual Basic Copy MoveExistingPosition ( _     ProductKey As String, _     CurrentFixtureName As String, _     Direction As PosDirections, _     TargetFixture As String, _     AdjacentPositionID ..."},"117":{y:0,u:"../content/movein.htm",l:-1,t:"MoveIn",i:0.000919624090050648,a:"This command moves the selected object in one increment. You must select objects on the planogram before using this action in the script. Note: The following conditions apply to all Move actions: The ability to move positions may depend on merchandising controls set for the position or the fixture ..."},"118":{y:0,u:"../content/moveleft.htm",l:-1,t:"MoveLeft",i:0.000919624090050648,a:"This command moves the selected object to the left one increment. You must select objects on the planogram before using this action in the script. Note: The following conditions apply to all Move actions: The ability to move positions may depend on merchandising controls set for the position or the ..."},"119":{y:0,u:"../content/moveleftonesegment.htm",l:-1,t:"MoveLeftOneSegment",i:0.000919624090050648,a:"This command moves the selected object to the left one segment. You must select objects on the planogram before using this action in the script. Note: The following conditions apply to all Move actions: The ability to move positions may depend on merchandising controls set for the position or the ..."},"120":{y:0,u:"../content/moveout.htm",l:-1,t:"MoveOut",i:0.000919624090050648,a:"This command moves the selected object out one increment. You must select objects on the planogram before using this action in the script. Note: The following conditions apply to all Move actions: The ability to move positions may depend on merchandising controls set for the position or the fixture ..."},"121":{y:0,u:"../content/moveright.htm",l:-1,t:"MoveRight",i:0.000919624090050648,a:"This command moves the selected object to the right one increment. You must select objects on the planogram before using this action in the script. Note: The following conditions apply to all Move actions: The ability to move positions may depend on merchandising controls set for the position or the ..."},"122":{y:0,u:"../content/moverightonesegment.htm",l:-1,t:"MoveRightOneSegment",i:0.000919624090050648,a:"This command moves the selected object to the right one segment. You must select objects on the planogram before using this action in the script. Note: The following conditions apply to all Move actions: The ability to move positions may depend on merchandising controls set for the position or the ..."},"123":{y:0,u:"../content/moveup.htm",l:-1,t:"MoveUp",i:0.000919624090050648,a:"This command moves the selected object up one increment. You must select objects on the planogram before using this action in the script. Note: The following conditions apply to all Move actions: The ability to move positions may depend on merchandising controls set for the position or the fixture ..."},"124":{y:0,u:"../content/multiply.htm",l:-1,t:"Multiply",i:0.000919624090050648,a:"This command copies the selected object by creating a grid with additional rows and columns of the object. You must select an object on the planogram before using this command. See \"Multiply an object\" in the Space Planning OnLine Expert for additional information. Syntax Visual Basic Copy Multiply ..."},"125":{y:0,u:"../content/openfixturelibrary_.htm",l:-1,t:"OpenFixtureLibrary ",i:0.00326479394501601,a:" This command opens a fixture library. Syntax Visual Basic Copy OpenFixtureLibrary ( _     FixtureLibraryName As String _ ) C# Copy Space.Project OpenFixtureLibrary(string FixtureLibraryName) Parameters Example: Update a Space Planning fixture library from a project Classic style scripting  Visual ..."},"126":{y:0,u:"../content/openfromdatabase.htm",l:-1,t:"OpenFromDatabase",i:0.00672290568766933,a:"This command enables you to merge or append planograms from the database to the current project or active planogram. Note: To open a single planogram for processing, you should use the  OpenPlanogramFromDatabase  command. Syntax Visual Basic Copy OpenFromDatabase(DBKeys() as Integer, OpenType as ..."},"127":{y:0,u:"../content/openiksdocument.htm",l:-1,t:"OpenIKSDocument",i:0.00131048573254488,a:"This command opens the planogram project file that is associated with the current Category Knowledge Server job that was uploaded by the remote user. The project file is opened in Space Planning and can be processed by the CKS script. For upload tasks, each uploaded document creates a separate job. ..."},"128":{y:0,u:"../content/openiksobjectsfromdatabase.htm",l:-1,t:"OpenIKSObjectsFromDatabase",i:0.00242446493245508,a:"This command reads the DBKey values from the ObjectKey column in the ix_net_iks_job table, then opens the associated planograms from the ix_spc_planogram table in the Category Knowledge Base database and uses them in processing the CKS script. Notes:  This command should only be used in a script ..."},"129":{y:0,u:"../content/openplanogramfromdatabase.htm",l:-1,t:"OpenPlanogramFromDatabase",i:0.00682601432195254,a:"This command enables you to load an existing planogram from the Category Knowledge Base database into Space Planning as a single-planogram project. You should use this command to open and process a single planogram in a script. If you have enabled Object Versioning restrictions in the database, ..."},"130":{y:0,u:"../content/openproductlibrary_.htm",l:-1,t:"OpenProductLibrary ",i:0.00471102905984797,a:" This command opens a product library. Syntax Visual Basic Copy OpenProductLibrary ( _     ProductLibraryName As String _ ) C# Copy Space.ProductLibrary OpenProductLibrary(string ProductLibraryName) Parameters Example: Update a project from a product library Classic style scripting  Visual Basic ..."},"131":{y:0,u:"../content/openprojectfile.htm",l:-1,t:"OpenProjectFile",i:0.000919624090050648,a:"This command enables you to load an existing project file. Use this command to open and process a single project in a script.  Syntax Visual Basic Copy OpenProjectFile ( _     FileName As String _ )  C# Copy Space.Project OpenProjectFile(string FileName) Parameters Example: Update a project from a ..."},"132":{y:0,u:"../content/openprojectfromdatabase.htm",l:-1,t:"OpenProjectFromDatabase",i:0.00124310147099545,a:"This command enables you to open and process a single project from the Category Knowledge Base database in Space Planning. Notes:  You must include the SelectDatabase command before this command to select the database to be accessed by your script. This command is not needed in a Business Rule ..."},"133":{y:0,u:"../content/openscriptdocument.htm",l:-1,t:"OpenScriptDocument",i:0.00203360328996085,a:"This command opens the planogram project file that is associated with the current Category Knowledge Server (CKS) job that was uploaded by the remote user. The project file is opened in Space Planning and can be processed by the CKS script. For upload tasks, each uploaded document creates a separate ..."},"134":{y:0,u:"../content/openscriptobjectsfromdatabase.htm",l:-1,t:"OpenScriptObjectsFromDatabase",i:0.00298055849489857,a:"This command reads the DBKey values from the ObjectKey column in the ix_net_iks_job table, then opens the associated planograms from the ix_spc_planogram table in the Category Knowledge Base database and uses them in processing the CKS script. Note: This command should only be used in a script that ..."},"135":{y:0,u:"../content/opentablechartview.htm",l:-1,t:"OpenTableChartView",i:0.000919624090050648,a:"This command enables you to open a table or chart file. The table or chart that is opened displays information for the active project only. To display table data for multiple projects, you should use this command in a  ForProjects  loop to open table views for each project. If opening a table for ..."},"136":{y:0,u:"../content/openxmldocument.htm",l:-1,t:"OpenXMLDocument",i:0.000919624090050648,a:"This command supports the Planogram Editor view in Open Access, and opens the planogram file associated with the current Category Knowledge Server (CKS) job that was submitted by the remote user. After changes are applied to the planogram in the Open Access Planogram viewer, this command opens the ..."},"137":{y:0,u:"../content/pastefromclipboard.htm",l:-1,t:"PasteFromClipboard",i:0.000919624090050648,a:"This command pastes objects from the Clipboard onto the planogram. This action is equivalent to selecting the Paste  option in the Home or Build ribbon in Space Planning. You must select a target destination on the planogram before you use this command. See \"Copy a position\" and \"Copy a fixture\" in ..."},"138":{y:0,u:"../content/printtablechart.htm",l:-1,t:"PrintTableChart",i:0.00227923363708161,a:"This command enables you to print a table or chart. The command prints the specified table for the active project. If no project is open, an error results. The table is printed using the Table.psy layout file. This layout file is stored in the directory in which Space Automation is installed. You ..."},"139":{y:0,u:"../content/printusingduallayout.htm",l:-1,t:"PrintUsingDualLayout",i:0.000919624090050648,a:"This command enables you to print a planogram using a dual layout. Dual layouts are specialized layouts that are configured to compare the planogram being printed with another planogram that is selected at print time. You can select a comparison planogram in a separate project (if specified) or ..."},"140":{y:0,u:"../content/printusinglayout.htm",l:-1,t:"PrintUsingLayout",i:0.000919624090050648,a:"This command enables you to designate the layout the script uses when printing the active project. Syntax Visual Basic Copy PrintUsingLayout ( _     LayoutFile As String, _     Selection As SpaceSelection, _     Printer As String = Nothing, _     FileName As String = Nothing _ ) C# Copy ..."},"141":{y:0,u:"../content/printusingprintlist.htm",l:-1,t:"PrintUsingPrintList",i:0.000919624090050648,a:"This command enables you to print the projects included in a print list. The print list can either be an existing batch print (.psi) file created in Space Planning, or one created using the  CreatePrintList  and  AddEntryToPrintList  commands before this command in the script. Note: If your projects ..."},"142":{y:0,u:"../content/redrawoff.htm",l:-1,t:"RedrawOff",i:0.00266390334965491,a:"This command disables the screen refresh in Space Planning and limits the number of times Space Planning redraws the project\u0027s active view. Using this command may speed performance of scripts during processing. When projects are modified by a script, Space Planning must spend time redrawing the ..."},"143":{y:0,u:"../content/redrawon.htm",l:-1,t:"RedrawOn",i:0.00205189642698027,a:"This command turns on the screen refresh in Space Planning, and forces Space Planning to redraw its active project view. Use this command if a  RedrawOff  command was previously used in a script to limit Space Planning\u0027s redrawing. Note: When Redraw is turned off, then turned back on (by using this ..."},"144":{y:0,u:"../content/reload3dmodels.htm",l:-1,t:"Reload3DModels",i:0.000919624090050648,a:"This command reloads the models in the current 3D planogram view. This process is useful when file locations change, or when existing models are modified or new ones are added to the selected file locations. Syntax Visual Basic Copy Reload3DModels() C# Copy bool Reload3DModels() Example: Reload 3D ..."},"145":{y:0,u:"../content/reloadbitmaps.htm",l:-1,t:"ReloadBitmaps",i:0.000919624090050648,a:"This command reloads the images in the current planogram view. This process is useful when file locations change, or when existing images are modified or new ones are added to the selected file locations. Syntax Visual Basic Copy ReloadBitmaps() C# Copy bool ReloadBitmaps() Example: Reload planogram ..."},"146":{y:0,u:"../content/removeunusedproducts.htm",l:-1,t:"RemoveUnusedProducts",i:0.000919624090050648,a:"This command removes unallocated products from the active project. Syntax Visual Basic Copy RemoveUnusedProducts() C# Copy RemoveUnusedProducts() Example: Remove unused products Classic style scripting  Visual Basic Copy SpacePlanning.OpenProjectFile(\"C:\\Program Files ..."},"147":{y:0,u:"../content/renumberlocationids.htm",l:-1,t:"RenumberLocationIDs",i:0.000919624090050648,a:"This command renumbers Location IDs for positions and fixtures, if the IDs are set to be numbered manually. Syntax Visual Basic Copy RenumberLocationIDs C# Copy RenumberLocationIDs() Example: Renumber Location IDs Classic style scripting  Visual Basic Copy SpacePlanning.OpenProjectFile(\"C:\\Program ..."},});