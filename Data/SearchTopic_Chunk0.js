define({"0":{y:0,u:"../content/get_started.htm",l:-1,t:"Get started",i:0.0281410195799551,a:"Activate Space Automation Professional Start Visual Studio. Perform one of the following tasks: If you are activating for the first time, select Space Automation \u003e Command Explorer in the menu bar.  Note: For Visual Studio 2019, select Extensions \u003e Space Automation -\u003e Command Explorer. To change an ..."},"1":{y:0,u:"../content/use_the_online_expert.htm",l:-1,t:"Use the OnLine Expert",i:0.000919624090050648,a:"Search for content You can use the Search field in the OnLine Expert\u0027s header to search for content. You can use the following options to search for words or phrases in the Search field: The following rules apply when you search: Searches are not case-sensitive, so you can enter your search in ..."},"2":{y:0,u:"../content/command_explorer_overview.htm",l:-1,t:"Command Explorer overview",i:0.0616117267057855,a:"The Command Explorer window displays all commands that can be used with Space Automation Professional. You can double-click commands in the Command Explorer window to add them to your script. If the command requires additional parameters, a dialog box may be displayed to enable you to specify those ..."},"3":{y:0,u:"../content/scripts.htm",l:-1,t:"Scripts",i:0.00128322782405971,a:"Create a script Open Microsoft Visual Studio. In the Start Page tab, click New Project. The New Project dialog box is displayed. Under Installed, expand one of the following folders: Templates \u003e Visual Basic \u003e Space Automation Templates \u003e Visual C# \u003e Space Automation Note: In the Visual Studio 2019 ..."},"4":{y:0,u:"../content/code_snippet_examples.htm",l:-1,t:"Code snippet examples",i:0.000919624090050648,a:"Some tasks previously supported by commands in legacy Space Automation do not require explicit commands in Space Automation Professional. Instead, code snippets can be used to perform these tasks. The following code snippets are available: GetAndSetSpaceFieldValuesForAllRecords: Used to retrieve and ..."},"5":{y:0,u:"../content/restrictions.htm",l:-1,t:"Restrictions",i:0.000919624090050648,a:"The following guidelines should be used when you create Space Automation Professional scripts: Configuration field adjustment There is a different process to access Application (Configuration) fields. Configuration object fields are accessed through SpacePlanning.Application and ..."},"6":{y:0,u:"../content/event_support.htm",l:-1,t:"Event support",i:0.000919624090050648,a:"The following events are supported by Space Automation Professional:\t public enum SpaceEvents {     ProjectClose = 10,     FileOpen = 19,     FileClose = 20,     FileSave = 21,     FileSaveAs = 22,     FileOpenFromDatabase = 23,     FileSaveToDatabase = 24,     FilePrint = 27,     FileBatchPrint = ..."},"7":{y:0,u:"../content/business_rule_validation_overview.htm",l:-1,t:"Business rule validation overview",i:0.00128322782405971,a:"Business rule validation enables you to review planograms and floorplans to ensure that they meet specific business criteria before you open or save the objects in a Category Knowledge Base database. For example, you can use business rule validation to ensure that all shelves are the correct depth ..."},"8":{y:0,u:"../content/category_knowledge_server_overview.htm",l:-1,t:"Category Knowledge Server overview",i:0.000919624090050648,a:"Category Knowledge Server (CKS) is a separately-licensed module of CKB that enables on-demand access to merchandising information. Currently, CKS supports Space Planning and Space Automation Professional to enable remote users to request reports or to review or process planograms using Open Access.  ..."},"9":{y:0,u:"../content/planogram_generator_scripts.htm",l:-1,t:"Planogram Generator script notes",i:0.000919624090050648,a:"You can create Space Automation Professional scripts that can be called by a Planogram Generator action list when you generate target planograms. These scripts can be used to perform a variety of tasks that occur before or after the planogram generation process. You can perform the following types ..."},"10":{y:0,u:"../content/space_planning_commands.htm",l:-1,t:"Space Planning commands",i:0.000919624090050648,a:"Space Planning commands  In this section"},"11":{y:0,u:"../content/adddrawing.htm",l:-1,t:"AddDrawing",i:0.000919624090050648,a:"This command enables you to add a new drawing to the active planogram. This command sets only basic information for the drawing. To edit additional drawing fields, use the  SetDrawingField  command after the drawing is added. Syntax Visual Basic Copy AddDrawing (DrawingName As String,  DrawingType ..."},"12":{y:0,u:"../content/addentrytoprintlist.htm",l:-1,t:"AddEntryToPrintList",i:0.00873209747626383,a:"This command enables you to add a new project/layout combination to a batch print (.psi) file. The print list can be an existing one, or it can be created by a script using the  CreatePrintList  command. Additions to the batch print list are automatically saved when the script is run. The print list ..."},"13":{y:0,u:"../content/addfiletopackage.htm",l:-1,t:"AddFileToPackage",i:0.00612793968085944,a:"Use this command to add files, such as non-Space Planning files that typically accompany the project, to an existing package created by the  CreatePackage  command.  Syntax Visual Basic Copy AddFileToPackage ( _             PackageName As String, _              ParamArray UserFiles As String() ..."},"14":{y:0,u:"../content/addfixture.htm",l:-1,t:"AddFixture",i:0.000919624090050648,a:"This command enables you to add a new fixture to the active planogram. This command sets only basic information for the fixture. To edit additional fixture fields, use the  SetFixtureField  command after the fixture is added. Syntax Visual Basic Copy AddFixture ( _     FixtureName As String, _ ..."},"15":{y:0,u:"../content/addplanogram.htm",l:-1,t:"AddPlanogram",i:0.000919624090050648,a:"This command enables you to add a new planogram to the active project. This command sets only basic information for the new planogram. To edit additional planogram fields, use the  SetPlanogramField  command after the planogram is added. Syntax Visual Basic Copy AddPlanogram ( _     PlanogramName As ..."},"16":{y:0,u:"../content/addproduct_.htm",l:-1,t:"AddProduct ",i:0.000919624090050648,a:" This command enables you to create a new product in the active project. This command sets only basic information for the new product. To edit additional product fields, use the  SetProductField  command after the product is added. Syntax Visual Basic Copy AddProduct ( _     ProductName As String, _ ..."},"17":{y:0,u:"../content/addproductfromproductlibrary.htm",l:-1,t:"AddProductFromProductLibrary",i:0.000919624090050648,a:"This command enables you to add a single product from a product library to the active project. After the product is added, you can use the  InsertPosition  command to place the product on a fixture within a planogram. You must use the  OpenProductLibrary  command to open a product library, or have a ..."},"18":{y:0,u:"../content/addsegment.htm",l:-1,t:"AddSegment",i:0.000919624090050648,a:"This command enables you to add a new segment, either before or after an existing segment. It returns the number of the new segment created by the command. Syntax Visual Basic Copy AddSegment(SegmentNumber As Integer, AddBefore As Boolean)                 C# Copy AddSegment(int SegmentNumber , bool ..."},"19":{y:0,u:"../content/addtomessagelist.htm",l:-1,t:"AddToMessageList",i:0.00612793968085944,a:"This command enables you to add a message to the Space Planning message list to identify an object that does not meet a condition in a validation script. You also use this command in a Category Knowledge Server (CKS) script to enable messages to be displayed for remote users. You can perform the ..."},"20":{y:0,u:"../content/adjustfixturemerchspace.htm",l:-1,t:"AdjustFixtureMerchSpace",i:0.000919624090050648,a:"This command adjusts the Fixture Merch value assigned to selected fixtures to accommodate the location of the fixtures above them. You must select fixtures on the planogram before using this command.  Note: When using this command, the merchandising space for the highest fixture on the planogram ..."},"21":{y:0,u:"../content/adjustfixtureytomerchspace.htm",l:-1,t:"AdjustFixtureYToMerchSpace",i:0.000919624090050648,a:"This command adjusts the fixture location for selected fixtures to accommodate the merchandising space of the fixtures below them. You must select fixtures on the planogram before using this action in the script. See \"Adjust fixture location based on merchandising space\" in the Space Planning OnLine ..."},"22":{y:0,u:"../content/aligndown.htm",l:-1,t:"AlignDown",i:0.000919624090050648,a:"This command aligns selected objects toward the bottom of the fixture or planogram. You must select objects on the planogram before using this action in the script. Note: The ability to align positions in any direction depends on merchandising controls set for the fixture on which the position is ..."},"23":{y:0,u:"../content/alignleft.htm",l:-1,t:"AlignLeft",i:0.000919624090050648,a:"This command aligns selected objects to the left of the fixture or planogram. You must select objects on the planogram before using this action in the script. Note: The ability to align positions in any direction depends on merchandising controls set for the fixture on which the position is placed ..."},"24":{y:0,u:"../content/alignright.htm",l:-1,t:"AlignRight",i:0.000919624090050648,a:"This command aligns selected objects to the right of the fixture or planogram. You must select objects on the planogram before using this action in the script. Note: The ability to align positions in any direction depends on merchandising controls set for the fixture on which the position is placed ..."},"25":{y:0,u:"../content/alignup.htm",l:-1,t:"AlignUp",i:0.000919624090050648,a:"This command aligns selected objects toward the top of the fixture or planogram. You must select objects on the planogram before using this action in the script. Note: The ability to align positions in any direction depends on merchandising controls set for the fixture on which the position is ..."},"26":{y:0,u:"../content/appendplanogram.htm",l:-1,t:"AppendPlanogram",i:0.0017013473750391,a:"This command enables you to copy the planograms in a selected project file and add them as new tabs in the active project. This command performs the same action as selecting File \u003e Open and selecting the Add Planograms to Active Project option when opening files. Note: If the source project contains ..."},"27":{y:0,u:"../content/applyassortmentrecommendations.htm",l:-1,t:"ApplyAssortmentRecommendations",i:0.000919624090050648,a:"This command applies the recommended changes in merchandising style, orientation, or number of horizontal facings to the selected position. Syntax Visual Basic Copy ApplyAssortmentRecommendations() C# Copy ApplyAssortmentRecommendations() Example: Apply assortment recommendations Classic style ..."},"28":{y:0,u:"../content/centerhorizontally.htm",l:-1,t:"CenterHorizontally",i:0.000919624090050648,a:"This command centers the selected objects horizontally on the fixture or planogram. You must select objects on the planogram before using this action in the script. Note: The ability to center positions on a fixture depends on merchandising controls set for the fixture on which the position is ..."},"29":{y:0,u:"../content/centervertically.htm",l:-1,t:"CenterVertically",i:0.000919624090050648,a:"This command centers the selected objects vertically on the fixture or planogram. You must select objects on the planogram before using this action in the script. Note: The ability to center positions on a fixture depends on merchandising controls set for the fixture on which the position is placed ..."},"30":{y:0,u:"../content/changehorizontalfacings.htm",l:-1,t:"ChangeHorizontalFacings",i:0.000919624090050648,a:"This command enables you to specify the number of horizontal facings for a specified product\u0027s position. Merchandising settings made in Space Planning may prevent the script from changing the number of horizontal facings for a position. For example, if Number of Facings Wide field for the fixture is ..."},"31":{y:0,u:"../content/changeverticalfacings.htm",l:-1,t:"ChangeVerticalFacings",i:0.000919624090050648,a:"This command enables you to change vertical facings for a specified product\u0027s position. Merchandising settings made in Space Planning may prevent the script from changing the number of vertical facings of the products. For example, if Number of Facings High for the fixture is set to Fill Available ..."},"32":{y:0,u:"../content/checkprojectreadonlystatus.htm",l:-1,t:"CheckProjectReadOnlyStatus",i:0.000919624090050648,a:"This command determines whether the current active project is read-only. It returns True if the project is read-only. Syntax Visual Basic Copy SpacePlanning.CheckProjectReadOnlyStatus() C# Copy bool CheckProjectReadOnlyStatus() Example: Check a Space Planning project\u0027s read-only status Classic style ..."},"33":{y:0,u:"../content/clearmessagelist.htm",l:-1,t:"ClearMessageList",i:0.000919624090050648,a:"This command clears the contents of the Space Planning Business Rule Validation message list. This step is useful, because it ensures that only messages associated with the most recent validation are displayed in the list. Syntax Visual Basic Copy ClearMessageList C# Copy ClearMessageList() Example: ..."},"34":{y:0,u:"../content/clearundo.htm",l:-1,t:"ClearUndo",i:0.000919624090050648,a:"This command clears the actions stored in the Undo list for Space Planning, which prevents a user from reversing the actions performed by the script within Space Planning. Syntax Visual Basic Copy ClearUndo() C# Copy ClearUndo() Example: Add objects to a Space Planning planogram Classic style ..."},"35":{y:0,u:"../content/closefixturelibrary.htm",l:-1,t:"CloseFixtureLibrary",i:0.000919624090050648,a:"This command enables you to close a fixture library. If you modified the fixture library, use the  SaveFixtureLibrary  command to save the changes before using this command. Syntax Visual Basic Copy CloseFixtureLibrary ( _     FixtureLibraryName As String _ ) C# Copy CloseFixtureLibrary([string ..."},"36":{y:0,u:"../content/closeiksdocument.htm",l:-1,t:"CloseIKSDocument",i:0.000919624090050648,a:"This command closes all objects opened by the  OpenIKSDocument  command. The command is optional, because all open documents are closed when the CKS script processing has been completed. The command can be used to close objects that are no longer required and can improve memory usage on a server. ..."},"37":{y:0,u:"../content/closeiksobjects.htm",l:-1,t:"CloseIKSObjects",i:0.000919624090050648,a:"This command closes all objects opened by the  OpenIKSObjectsfromDatabase  command. The command is optional, because all open objects are closed when the CKS script processing has been completed. The command can be used to close objects that are no longer required and can improve memory usage on a ..."},"38":{y:0,u:"../content/closeproductlibrary.htm",l:-1,t:"CloseProductLibrary",i:0.000919624090050648,a:"This command enables you to close a product library. The library does not have to be saved before closing, because changes made to the library data are saved automatically in the library\u0027s data source. Syntax Visual Basic Copy CloseProductLibrary ( _     ProductLibraryName As String _ ) C# Copy ..."},"39":{y:0,u:"../content/closeprojectfile.htm",l:-1,t:"CloseProjectFile",i:0.00182804954205655,a:"This command enables you to close the currently active project. The project being closed is not saved automatically, and no warning is displayed if the file was modified. If the script modified the project being closed and you do not want to lose the changes, use the  SaveProjectFile ,  ..."},"40":{y:0,u:"../content/closescriptdocument.htm",l:-1,t:"CloseScriptDocument",i:0.00131048573254488,a:"This command closes all objects opened by any Open command. The command can be used to close objects that are no longer required and can improve memory usage on a server. Note: This command is supported only when Space Automation Professional is  configured  to use a direct database connection. ..."},"41":{y:0,u:"../content/closescriptobjects.htm",l:-1,t:"CloseScriptObjects",i:0.00131048573254488,a:"This command closes all objects opened by the  OpenScriptObjectsfromDatabase  command. The command is optional, because all open objects are closed when the CKS script processing has been completed. The command can be used to close objects that are no longer required and can improve memory usage on ..."},"42":{y:0,u:"../content/closetablechartview.htm",l:-1,t:"CloseTableChartView",i:0.000919624090050648,a:"This command closes a selected table or chart file. If no parameter is listed, the command closes the last table or chart view to be opened by the script. You do not have to save the table or chart view before closing the file, because you cannot modify the layout of the table or chart in a script. ..."},"43":{y:0,u:"../content/copypicturetoclipboard.htm",l:-1,t:"CopyPictureToClipboard",i:0.000919624090050648,a:"This command copies a planogram image to the Clipboard.  Syntax Visual Basic Copy CopyPictureToClipboard ( _     LayoutFileName As String, _     LayoutSource As Integer, _     LayoutPage As Integer, _     Format As Integer, _     Height As Integer, _     Width As Integer, _     RenderMethod As ..."},"44":{y:0,u:"../content/copytoclipboard.htm",l:-1,t:"CopyToClipboard",i:0.000919624090050648,a:"This command copies the selected objects to the Clipboard. This action is equivalent to selecting  Copy  in the Edit group of the Home or Build ribbon in Space Planning. You must select objects on the planogram before using this action in the script. Syntax Visual Basic Copy CopyToClipboard() C# ..."},"45":{y:0,u:"../content/createforceinventoryparameters.htm",l:-1,t:"CreateForceInventoryParameters",i:0.00612793968085944,a:"This command enables you to create a list of parameter settings for use when performing a Force Inventory on planograms in the specified projects. The parameters for this command correspond to the settings available on the Space Planning Force Inventory dialog box. After the Force Inventory ..."},"46":{y:0,u:"../content/createresetfinancialinventoryparameters.htm",l:-1,t:"CreateResetFinancialInventoryParameters",i:0.00612793968085944,a:"This command enables you to create a list of parameter settings for use when resetting Product-level and Performance-level financial and inventory fields. The parameters for this command correspond to the settings available on the Space Planning Reset Financial/Inventory Data dialog box. After the ..."},"47":{y:0,u:"../content/createnewproject.htm",l:-1,t:"CreateNewProject",i:0.000919624090050648,a:"This command creates an untitled project. This command creates a new project with the default settings. You can use the ProjectName setting to specify the name of the project, and use the  SetFieldValue  command after the project is created to set the necessary project information. Syntax Visual ..."},"48":{y:0,u:"../content/createobjectarray_space.htm",l:-1,t:"CreateObjectArray",i:0.00205189642698027,a:"This command creates an array for use with the  SetMultipleFieldValues  command. Syntax Visual Basic Copy CreateObjectArray(fieldObject as SpaceBulkSetFieldObject, fieldValues as object[,]) C# Copy SpacePlanning.CreateObjectArray(SpaceBulkSetFieldObject fieldObject, object[,] fieldValues) Parameters ..."},"49":{y:0,u:"../content/createpackage.htm",l:-1,t:"CreatePackage",i:0.00612793968085944,a:"This command enables you to combine files related to the active project (including the project, open tables and charts, images, labels, printing layouts, and open libraries and their databases) into a package that is saved as a zip file.  After you create the package file, you can use the  ..."},"50":{y:0,u:"../content/createprintlist.htm",l:-1,t:"CreatePrintList",i:0.00873209747626383,a:"This command enables you to create a new batch print (.psi) file. The batch print list is automatically saved when the script is run. New entries can then be added to a print list from in a script using the  AddEntryToPrintList  command. You must first run the line containing this command to save ..."},"51":{y:0,u:"../content/cuttoclipboard.htm",l:-1,t:"CutToClipboard",i:0.000919624090050648,a:"This command cuts the selected objects to the Clipboard. This action is equivalent to selecting  Cut  in the Edit group of the Home or Build ribbon in Space Planning. You must select objects on the planogram before using this action in the script. Syntax Visual Basic Copy CutToClipboard() C# Copy ..."},"52":{y:0,u:"../content/decreasehorizontalfacings.htm",l:-1,t:"DecreaseHorizontalFacings",i:0.000919624090050648,a:"This command enables you to decrease the number of horizontal facings by a specified amount. Merchandising settings made in Space Planning may limit the script\u0027s ability to decrease the number of horizontal facings. For example, if Number of Facings Wide for the fixture is set to Fill Available ..."},"53":{y:0,u:"../content/decreaseverticalfacings_.htm",l:-1,t:"DecreaseVerticalFacings ",i:0.000919624090050648,a:" This command enables you to decrease the number of vertical facings by a specified amount. Merchandising settings made in Space Planning may limit the script\u0027s ability to decrease the number of vertical facings. For example, if Number of Facings High for the fixture is set to Fill Available Space, ..."},"54":{y:0,u:"../content/deletedrawing.htm",l:-1,t:"DeleteDrawing",i:0.00205189642698027,a:"This command enables you to delete a single drawing object, such as an arc or text box. To delete multiple drawing objects, use the  DeleteDrawingsWithCondition  command. Syntax Visual Basic Copy DeleteDrawing ( _     DrawingName As String _ ) C# Copy DeleteDrawing(string DrawingName) Parameters ..."},"55":{y:0,u:"../content/deletedrawingswithcondition.htm",l:-1,t:"DeleteDrawingsWithCondition",i:0.00266390334965491,a:"This command enables you to remove all drawings that meet a designated condition from the active planogram in the active project. This command enables you to delete drawing objects without embedding the  DeleteDrawing  command in a  ForDrawings  loop. Syntax Visual Basic Copy ..."},"56":{y:0,u:"../content/deletefixture.htm",l:-1,t:"DeleteFixture",i:0.00205189642698027,a:"This command enables you to remove a specified fixture from the active planogram. If positions exist on the fixture being deleted, the positions are also removed from the planogram without warning. To delete multiple fixtures, use the  DeleteFixturesWithCondition  command. Syntax Visual Basic Copy ..."},"57":{y:0,u:"../content/deletefixtureswithcondition.htm",l:-1,t:"DeleteFixturesWithCondition",i:0.00266390334965491,a:"This command enables you to remove all fixtures that meet a designated condition from the active planogram in the active project. This command enables you to delete fixtures without embedding the  DeleteFixture  command in a  ForFixtures  loop. If positions exist on the fixtures being deleted, the ..."},"58":{y:0,u:"../content/deleteplanogram_.htm",l:-1,t:"DeletePlanogram ",i:0.00205189642698027,a:" This command enables you to delete a planogram from the project. If fixtures and positions exist on the planogram being deleted, those fixtures and positions are also removed from the project without warning. To delete multiple planograms, use the  DeletePlanogramsWithCondition  command. Syntax ..."},"59":{y:0,u:"../content/deleteplanogramswithcondition_.htm",l:-1,t:"DeletePlanogramsWithCondition ",i:0.00266390334965491,a:" This command enables you to remove all planograms that meet a designated condition from the active project. This command enables you to delete planograms without having to embed the  DeletePlanogram  command in a  ForPlanograms  loop. If fixtures and positions exist on the planograms being deleted, ..."},"60":{y:0,u:"../content/deleteposition.htm",l:-1,t:"DeletePosition",i:0.00205189642698027,a:"This command enables you to delete a specific position from the project. To delete multiple positions, use the  DeletePositionsWithCondition  command. Syntax Visual Basic Copy DeletePosition ( _     ProductKey As String, _     FixtureName As String, _     CurrentPositionX As Double, _ ..."},"61":{y:0,u:"../content/deletepositionswithcondition.htm",l:-1,t:"DeletePositionsWithCondition",i:0.00266390334965491,a:"This command enables you to remove all positions that meet a designated condition from the active planogram in the active project, without deleting the associated products from the project. This command enables you to delete positions without embedding the  DeletePosition  command in a  ForPositions ..."},"62":{y:0,u:"../content/deleteproduct.htm",l:-1,t:"DeleteProduct",i:0.00205189642698027,a:"This command enables you to delete a specific product from the project. If positions exist for the product being deleted, those positions are also removed from the project without warning. To delete multiple products, use the  DeleteProductsWithCondition  command. Syntax Visual Basic Copy ..."},"63":{y:0,u:"../content/deleteproducts.htm",l:-1,t:"DeleteProducts",i:0.000919624090050648,a:"This command enables you to remove positions from the currently selected planogram, products (and their associated positions) from the current project, or unused products from the current project. Syntax Visual Basic Copy DeleteProducts ( _     DeleteOption As ProductDeleteOptions _ ) C# Copy ..."},"64":{y:0,u:"../content/deleteproductswithcondition_.htm",l:-1,t:"DeleteProductsWithCondition ",i:0.00266390334965491,a:" This command enables you to remove all products (and their associated positions) that meet a designated condition from the active project. This command enables you to delete products without embedding the  DeleteProduct  command in a  ForProducts  loop. If positions exist for the products being ..."},"65":{y:0,u:"../content/deletesegment.htm",l:-1,t:"DeleteSegment",i:0.00205189642698027,a:"This command enables you to remove a specified segment from the active planogram. If fixtures begin in the segment being deleted, they are also removed from the project without warning, along with positions on the fixtures. To delete multiple segments, use the  DeleteSegmentsWithCondition  command. ..."},"66":{y:0,u:"../content/deletesegmentswithcondition.htm",l:-1,t:"DeleteSegmentsWithCondition",i:0.00266390334965491,a:"This command enables you to remove all segments that meet a designated condition from the current planogram. This command enables you to delete segments without having to embed the  DeleteSegment  command within a  ForSegments  loop. If fixtures begin in the segments being deleted, they are also ..."},"67":{y:0,u:"../content/deselectallobjects.htm",l:-1,t:"DeselectAllObjects",i:0.000919624090050648,a:"This command enables you to deselect multiple objects of the same type Syntax Visual Basic Copy DeselectAllObjects() C# Copy DeselectAllObjects() Example: Deselect all objects in Space Planning Classic style scripting  Visual Basic Copy SpacePlanning.OpenProjectFile(\"C:\\Program Files ..."},"68":{y:0,u:"../content/deselectobjects.htm",l:-1,t:"DeselectObjects",i:0.00612793968085944,a:"This command enables you to deselect multiple objects of the same type. You can use the  WhereCondition  parameter to specify the objects that are deselected. Syntax Visual Basic Copy DeselectObjects ( _     ObjectType As SpaceUIObjects, _     WhereCondition As String , _     Redraw As Boolean _ ) ..."},"69":{y:0,u:"../content/export3ds.htm",l:-1,t:"Export3DS",i:0.000919624090050648,a:"This command enables you to convert a planogram, including its associated models and images, to a 3DS model file for use in external applications, such as Floor Planning. The Save Model feature in Space Planning saves the shape of each object as a mesh, and saves the combination of color and image ..."},"70":{y:0,u:"../content/exportexceltabledata.htm",l:-1,t:"ExportExcelTableData",i:0.000919624090050648,a:"This command enables you to export table data to a Microsoft Excel file. Syntax Visual Basic Copy ExportExcelTableData(_     ExportFileName As String, _     XLOption As XLOption, _     TemplateFilename As String, _     SubTotals As Boolean, _     Format As Boolean_ ) C# Copy ..."},"71":{y:0,u:"../content/exportfbx.htm",l:-1,t:"ExportFBX",i:0.000919624090050648,a:"This command enables you to convert a planogram, including its associated models and images, to an FBX model file for use in external applications, such as Floor Planning. You can specify whether to embed associated images in the file. You can also create a Zip file to contain all images needed to ..."},"72":{y:0,u:"../content/exportimage.htm",l:-1,t:"ExportImage",i:0.00205189642698027,a:"This command enables you to export a planogram image to a file, which allows someone without Space Planning to view the planogram image. You can save the planogram picture based on the current view settings or you can specify a layout for the exported picture. To export a planogram image, both the ..."},"73":{y:0,u:"../content/exportpemplanogram.htm",l:-1,t:"ExportPEMPlanogram",i:0.000919624090050648,a:"This command enables you to export planograms for existing Planogram Exchange Management (PEM) sources from a Category Knowledge Base database into a flat file that then can be opened by Space Planning. See \"Planogram Exchange Management overview\" in the Category Knowledge Base OnLine Expert for ..."},});